class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        sort(initial.begin(),initial.end());
        vector<vector<bool>>reach(n,vector<bool>(n,false));
        function<void(int,int,int)>dfs = [&](int at, int par, int root){
            if(reach[root][at])return;
            reach[root][at]=true;
            for(int to = 0 ; to < n ; to++){
                if((graph[at][to]) && (to!=at) && (to!=par)){
                    dfs(to, at, root);
                }
            }
        };
        for(int inf: initial)dfs(inf,-1,inf);
        vector<int>summ(n,0);
        for(int i = 0 ; i < n ; i++){
            int sum = 0;
            int onlyreach = -1;
            for(int inf: initial){
                sum+=(int)reach[inf][i];
                if(reach[inf][i])onlyreach=inf;
            }
            if(sum==1)summ[onlyreach]++;
        }
        int bestidx = initial[0];
        for(int inf: initial){
            if(summ[bestidx] < summ[inf])bestidx=inf;
        }
        return bestidx;
    }
};